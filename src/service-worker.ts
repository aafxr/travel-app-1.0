/// <reference lib="webworker" />

/* eslint-disable no-restricted-globals */

// This service worker can be customized!
// See https://developers.google.com/web/tools/workbox/modules
// for the list of available Workbox modules, or add any other
// code you'd like.
// You can also remove this file if you'd prefer not to use a
// service worker, and the Workbox build step will be skipped.


import {precacheAndRoute, createHandlerBoundToURL} from 'workbox-precaching';
import {StaleWhileRevalidate, CacheFirst} from 'workbox-strategies';
import {ExpirationPlugin} from 'workbox-expiration';
import {registerRoute} from 'workbox-routing';
import {CACHE_VERSION, GLOBAL_DB_VERSION} from "./constants";


declare let self: ServiceWorkerGlobalScope


self.addEventListener('install', (e) => {
    e.waitUntil(
        caches.keys().then(cacheNames => {
            cacheNames.forEach(cacheName => {
                caches.delete(cacheName)
                    .catch(console.error);
            })
        })
    )
})


const version = CACHE_VERSION + GLOBAL_DB_VERSION

// Precache all of the assets generated by your build process.
// Their URLs are injected into the manifest variable below.
// This variable must be present somewhere in your service worker file,
// even if you decide not to use precaching. See https://cra.link/PWA
precacheAndRoute(self.__WB_MANIFEST);
// cleanupOutdatedCaches()


// Set up App Shell-style routing, so that all navigation requests
// are fulfilled with your index.html shell. Learn more at
// https://developers.google.com/web/fundamentals/architecture/app-shell
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
    // Return false to exempt requests from being fulfilled by index.html.
    ({request, url}) => {
        // If this isn't a navigation, skip.
        if (request.mode !== 'navigate') {
            return false;
        } // If this is a URL that starts with /_, skip.

        if (url.pathname.startsWith('/_')) {
            return false;
        } // If this looks like a URL for a resource, because it contains // a file extension, skip.

        // if (url.pathname.match(fileExtensionRegexp)) {
        //     return false;
        // } // Return true to signal that we want to use the handler.

        return true;
    },
    createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// An example runtime caching route for requests that aren't handled by the
// precache, in this case same-origin .png requests like those from in public/
registerRoute(
    // Add in any other file extensions or routing criteria as needed.
    ({url}) => url.origin === self.location.origin && /\.(png|jpg|jpeg|svg|ttf|woff|woff2|otf)$/i.test(url.pathname), // Customize this strategy as needed, e.g., by changing to CacheFirst.
    new StaleWhileRevalidate({
        cacheName: 'assets',
        plugins: [
            // Ensure that once this runtime cache reaches a maximum size the
            // least-recently used images are removed.
            new ExpirationPlugin({maxEntries: 50, maxAgeSeconds: 30 * 24 * 60 * 60}),
        ],
    })
);

registerRoute(
    ({url}) => url.origin === self.location.origin && url.origin.includes('yandex'), // Customize this strategy as needed, e.g., by changing to CacheFirst.
    new CacheFirst({
        cacheName: 'map',
        plugins: [
            new ExpirationPlugin({maxAgeSeconds: 29 * 24 * 60 * 60})
        ]
    }),
)


registerRoute(
    ({url}) => url.origin === self.location.origin && /api\./.test(location.origin), // Customize this strategy as needed, e.g., by changing to CacheFirst.
    new StaleWhileRevalidate({
        cacheName: 'api',
        plugins: [
            new ExpirationPlugin({maxAgeSeconds: 14 * 24 * 60 * 60}),
        ],
    })
)

const apiCache = [
    '/main/currency/getList/',
    '/expenses/getSections/'
]

registerRoute(
    ({url}) => url.origin === self.location.origin && apiCache.includes(url.pathname),
    new CacheFirst({
        cacheName: 'api',
        plugins: [ new ExpirationPlugin({maxAgeSeconds: 24 * 60 * 60}),],
    })
);

registerRoute(
    ({url}) => url.origin === self.location.origin,
    new StaleWhileRevalidate({
        cacheName: 'api',
        plugins: [ new ExpirationPlugin({maxAgeSeconds: 30 * 24 * 60 * 60}),],
    })
);


// This allows the web app to trigger skipWaiting via
// registration.waiting.postMessage({type: 'SKIP_WAITING'})
self.addEventListener('message', (event) => {
    if (event.data && event.data.type === 'SKIP_WAITING') {
        return self.skipWaiting();
    }
});

// Any other custom service worker logic can go here.

self.addEventListener("push", (e) => {
    const msg = e.data ? e.data.text() : ''
    if(msg){
        e.waitUntil(
            self.registration.showNotification('notification', {
                body: msg,
                vibrate: [500, 100, 500],
            })
        )
    }
});

